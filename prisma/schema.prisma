generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  name      String
  email     String    @unique
  role      String

  companyId String
  company   Company   @relation(fields: [companyId], references: [id])

  teamUsers TeamUser[]
  okrs      OKR[]
  notifications   UserNotification[]
}

model TeamUser {
  id      String   @id @default(uuid())
  userId  String
  user    User     @relation(fields: [userId], references: [id])
  teamId  String
  team    Team     @relation(fields: [teamId], references: [id])
}

model Team {
  id           String    @id @default(uuid())
  type         String    // setor/time/projeto
  name         String
  companyId    String
  company      Company   @relation(fields: [companyId], references: [id])
  
  parentTeamId String?   
  parent       Team?     @relation("TeamHierarchy", fields: [parentTeamId], references: [id])
  children     Team[]    @relation("TeamHierarchy")
  
  teamUsers    TeamUser[]
  okrs      OKR[]
  notifications   Notification[]
}

model Company {
  id      String   @id @default(uuid())
  name    String
  teams   Team[]
  users   User[]
  okrs    OKR[]
  notifications   Notification[]
}

model OKR {
  id           String    @id @default(uuid())
  type         String    // company/team/individual
  name         String
  value        String
  actualValue  String

  companyId    String?
  company      Company?   @relation(fields: [companyId], references: [id])

  userId  String?
  user    User?     @relation(fields: [userId], references: [id])

  teamId  String?
  team    Team?     @relation(fields: [teamId], references: [id])
}

model Notification {
  id        String    @id @default(uuid())
  type      String
  message   String
  metadata  Json?
  createdAt DateTime  @default(now())

  companyId String?
  company   Company?  @relation(fields: [companyId], references: [id])

  teamId    String?
  team      Team?     @relation(fields: [teamId], references: [id])

  userNotifications UserNotification[]
}

model UserNotification {
  id             String     @id @default(uuid())
  userId         String
  user           User       @relation(fields: [userId], references: [id])

  notificationId String
  notification   Notification @relation(fields: [notificationId], references: [id])

  isRead         Boolean    @default(false)
  readAt         DateTime?
}