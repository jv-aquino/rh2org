generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// next auth stuff
model Account {
  id                 String   @id @default(uuid()) @map("_id")
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.String
  access_token       String?  @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.String
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid()) @map("_id")
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(uuid()) @map("_id")
  identifier String
  token      String   @unique
  expires    DateTime
}

model User {
  id              String    @id @default(uuid()) @map("_id")
  name            String
  email           String    @unique
  emailVerified   DateTime?            // requerido pelo NextAuth
  image           String?              // requerido pelo NextAuth
  role            String    @default("user")

  companyId       String?
  company         Company?   @relation(fields: [companyId], references: [id])

  teamUsers       TeamUser[]
  okrs            OKR[]
  notifications   UserNotification[]
  
  accounts        Account[]
  sessions        Session[]
}

model TeamUser {
  id      String   @id @default(uuid()) @map("_id")
  userId  String
  user    User     @relation(fields: [userId], references: [id])
  teamId  String
  team    Team     @relation(fields: [teamId], references: [id])
}

model Team {
  id           String    @id @default(uuid()) @map("_id")
  type         String    // setor/time/projeto
  name         String
  companyId    String
  company      Company   @relation(fields: [companyId], references: [id])
  
  parentTeamId String?   
  parent       Team?     @relation("TeamHierarchy", fields: [parentTeamId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children     Team[]    @relation("TeamHierarchy")
  
  teamUsers    TeamUser[]
  okrs      OKR[]
  notifications   Notification[]
}

model Company {
  id             String   @id @default(uuid()) @map("_id")
  name           String
  cnpj           String
  razaoSocial    String
  site           String?

  cep            String
  uf             String
  localidade     String
  bairro         String
  logradouro     String
  complemento    String?

  emailDomains   EmailDomains[]
  teams          Team[]
  users          User[]
  okrs           OKR[]
  notifications  Notification[]
}

model EmailDomains {
  id              String    @id @default(uuid()) @map("_id")
  email           String    @unique
  companyId       String
  company         Company   @relation(fields: [companyId], references: [id])
}

model OKR {
  id           String    @id @default(uuid()) @map("_id")
  scope        String    // company/team/individual
  type         String    // nummber/boolean/%
  name         String
  value        String
  actualValue  String

  companyId    String?
  company      Company?   @relation(fields: [companyId], references: [id])

  userId  String?
  user    User?     @relation(fields: [userId], references: [id])

  teamId  String?
  team    Team?     @relation(fields: [teamId], references: [id])
}

model Notification {
  id        String    @id @default(uuid()) @map("_id")
  type      String
  message   String
  metadata  Json?
  createdAt DateTime  @default(now())

  companyId String?
  company   Company?  @relation(fields: [companyId], references: [id])

  teamId    String?
  team      Team?     @relation(fields: [teamId], references: [id])

  userNotifications UserNotification[]
}

model UserNotification {
  id             String     @id @default(uuid()) @map("_id")
  userId         String
  user           User       @relation(fields: [userId], references: [id])

  notificationId String
  notification   Notification @relation(fields: [notificationId], references: [id])

  isRead         Boolean    @default(false)
  readAt         DateTime?
}